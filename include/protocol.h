// Generated by gencpp from file simple_navigation_goals/protocol.msg
// DO NOT EDIT!


#ifndef SIMPLE_NAVIGATION_GOALS_MESSAGE_PROTOCOL_H
#define SIMPLE_NAVIGATION_GOALS_MESSAGE_PROTOCOL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace simple_navigation_goals
{
template <class ContainerAllocator>
struct protocol_
{
  typedef protocol_<ContainerAllocator> Type;

  protocol_()
    : header()
    , referenceStamp()
    , byte1(0)
    , byte2(0)
    , byte3(0)
    , byte4(0)
    , byte5(0)
    , byte6(0)
    , byte7(0)
    , byte8(0)  {
    }
  protocol_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , referenceStamp()
    , byte1(0)
    , byte2(0)
    , byte3(0)
    , byte4(0)
    , byte5(0)
    , byte6(0)
    , byte7(0)
    , byte8(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _referenceStamp_type;
  _referenceStamp_type referenceStamp;

   typedef uint8_t _byte1_type;
  _byte1_type byte1;

   typedef uint8_t _byte2_type;
  _byte2_type byte2;

   typedef uint8_t _byte3_type;
  _byte3_type byte3;

   typedef uint8_t _byte4_type;
  _byte4_type byte4;

   typedef uint8_t _byte5_type;
  _byte5_type byte5;

   typedef uint8_t _byte6_type;
  _byte6_type byte6;

   typedef uint8_t _byte7_type;
  _byte7_type byte7;

   typedef uint8_t _byte8_type;
  _byte8_type byte8;




  typedef boost::shared_ptr< ::simple_navigation_goals::protocol_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_navigation_goals::protocol_<ContainerAllocator> const> ConstPtr;

}; // struct protocol_

typedef ::simple_navigation_goals::protocol_<std::allocator<void> > protocol;

typedef boost::shared_ptr< ::simple_navigation_goals::protocol > protocolPtr;
typedef boost::shared_ptr< ::simple_navigation_goals::protocol const> protocolConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_navigation_goals::protocol_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_navigation_goals::protocol_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simple_navigation_goals

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'simple_navigation_goals': ['/home/neu/catkin_ws/src/simple_navigation_goals/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simple_navigation_goals::protocol_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_navigation_goals::protocol_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_navigation_goals::protocol_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_navigation_goals::protocol_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_navigation_goals::protocol_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_navigation_goals::protocol_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_navigation_goals::protocol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ac103d2c2e156a00ed53ea5f29c4565";
  }

  static const char* value(const ::simple_navigation_goals::protocol_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ac103d2c2e156a0ULL;
  static const uint64_t static_value2 = 0x0ed53ea5f29c4565ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_navigation_goals::protocol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_navigation_goals/protocol";
  }

  static const char* value(const ::simple_navigation_goals::protocol_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_navigation_goals::protocol_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
time referenceStamp\n\
uint8 byte1\n\
uint8 byte2\n\
uint8 byte3\n\
uint8 byte4\n\
uint8 byte5\n\
uint8 byte6\n\
uint8 byte7\n\
uint8 byte8\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::simple_navigation_goals::protocol_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_navigation_goals::protocol_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.referenceStamp);
      stream.next(m.byte1);
      stream.next(m.byte2);
      stream.next(m.byte3);
      stream.next(m.byte4);
      stream.next(m.byte5);
      stream.next(m.byte6);
      stream.next(m.byte7);
      stream.next(m.byte8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct protocol_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_navigation_goals::protocol_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_navigation_goals::protocol_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "referenceStamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.referenceStamp);
    s << indent << "byte1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte1);
    s << indent << "byte2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte2);
    s << indent << "byte3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte3);
    s << indent << "byte4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte4);
    s << indent << "byte5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte5);
    s << indent << "byte6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte6);
    s << indent << "byte7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte7);
    s << indent << "byte8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.byte8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_NAVIGATION_GOALS_MESSAGE_PROTOCOL_H
